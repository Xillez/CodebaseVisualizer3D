buildscript {
    repositories {
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
        maven {
            name 'JFrog jcenter-cache repo'
            url 'https://oss.jfrog.org/jcenter-cache/'
        }
    }

    dependencies {
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1.1-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'me.champeau.gradle.antlr4'
apply plugin: 'jacoco'

jacoco {
    //reportsDir = file("$buildDir/jacoco/reports")
    //destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    //classDumpDir = file("$buildDir/jacoco/classpathdumps")
    toolVersion = "0.8.2"
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html {
            enabled true
            destination file("$buildDir/jacoco/reports")
        }
    }
}

test.finalizedBy jacocoTestReport
test {
    useJUnitPlatform()
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        //classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.json/json
    compile group: 'org.json', name: 'json', version: '20180813'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

antlr4 {
    source = file('src/main/java/antlr')
    output = file('build/generatedsrc/me/codvis/ast/parser')
    extraArgs = ['-package', 'me.codvis.ast.parser']
}

compileJava.dependsOn antlr4

sourceSets.main.java.srcDirs += antlr4.output

configurations {
    compile.extendsFrom antlr4
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Java-Parser',
                   'Implementation-Version': '0.0.1'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}

task release(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Java-Parser',
                   'Implementation-Version': '0.0.1'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}
release.finalizedBy test

